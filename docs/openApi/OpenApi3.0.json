{
  "openapi": "3.0.1",
  "info": {
    "title": "DigiLean.Api",
    "description": "DigiLEAN Connect - REST API v1.0",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://apidev.digilean.tools",
      "description": "DigiLEAN Connect Test"
    }
  ],
  "paths": {
    "/v1/Boards": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Boards List",
        "description": "List boards with an optional filter",
        "operationId": "Boards_List",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "description": "Generic OData filtering. See [documentation](https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter)",
            "schema": {
              "type": "string"
            },
            "example": "name eq 'hello'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BoardInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Boards/{id}": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Board Detail",
        "description": "Get Board Detail",
        "operationId": "Boards_Details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Board Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Board"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Boards/{id}/tasks": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Board Tasks",
        "description": "Get tasks on a board",
        "operationId": "Boards_Tasks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Board Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Page Size default is 100 and max 10000",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "example": 200
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page default and start value is 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "example": 2
          },
          {
            "name": "From",
            "in": "query",
            "description": "Filter BoardDate. Greater than",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2023-12-01T00:00:00Z"
            },
            "example": "2023-12-01T00:00:00Z"
          },
          {
            "name": "To",
            "in": "query",
            "description": "Filter BoardDate. Lesser than",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2023-12-24T00:00:00Z"
            },
            "example": "2023-12-24T00:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPaged"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Boards"
        ],
        "summary": "Board Task Create",
        "description": "Create task on a board",
        "operationId": "Boards_TaskCreate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Board Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Customer list",
        "description": "List customers",
        "operationId": "Customers_List",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectCustomer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Customer Create",
        "description": "Create new customer",
        "operationId": "Customers_Create",
        "requestBody": {
          "description": "Customer object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCustomer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomer"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Customers/{customerNumber}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Customer Details",
        "description": "Get customer details",
        "operationId": "Customers_Details",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c1000"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomer"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Datalists": {
      "get": {
        "tags": [
          "Datalists"
        ],
        "summary": "Datalist List",
        "description": "List Datalists with optional filter",
        "operationId": "Datalists_List",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "description": "Generic OData filtering. See [documentation](https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter)",
            "schema": {
              "type": "string"
            },
            "example": "name eq 'mylist'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Datalists/{id}/items": {
      "get": {
        "tags": [
          "Datalists"
        ],
        "summary": "DataList Items",
        "description": "Gets Datalist items",
        "operationId": "Datalists_Items",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Datalist Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataListItem"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Datalists"
        ],
        "summary": "Datalist Item Create",
        "description": "Create a new item on Datalist",
        "operationId": "Datalists_CreateItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Datalist Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Item object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataListItemCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Datasources": {
      "get": {
        "tags": [
          "Datasources"
        ],
        "summary": "Datasource List",
        "description": "Get datasources with an optional filter",
        "operationId": "Datasources_List",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "description": "Generic OData filtering. See [documentation](https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter)",
            "schema": {
              "type": "string"
            },
            "example": "dimension eq 'hello'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSourceInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Datasources/{id}": {
      "get": {
        "tags": [
          "Datasources"
        ],
        "summary": "Datasource Details",
        "description": "Get Datasource details",
        "operationId": "Datasources_Details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Datasource Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Datasources/{id}/values": {
      "get": {
        "tags": [
          "Datasources"
        ],
        "summary": "Datasource Values",
        "description": "Gets values from Datasource with paging, optional filter and orderby",
        "operationId": "Datasources_Values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Datasource id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "from",
            "in": "query",
            "description": "Filter from ValueDate. Greater than",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2023-12-01T00:00:00Z"
            },
            "example": "2023-12-01T00:00:00Z"
          },
          {
            "name": "to",
            "in": "query",
            "description": "Filter to ValueDate. Lesser than",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2023-12-24T00:00:00Z"
            },
            "example": "2023-12-24T00:00:00Z"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page default and start value is 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "example": 2
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size default is 1000 and max 10000",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 2000
            },
            "example": 2000
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Generic OData filtering. See [documentation](https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter)",
            "schema": {
              "type": "string"
            },
            "example": "dimension eq 'hello'"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Generic OData ordering",
            "schema": {
              "type": "string"
            },
            "example": "valueDate desc"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValuesPaged"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Datasources"
        ],
        "summary": "Datasource Value Create",
        "description": "Create a new value on Datasource",
        "operationId": "Datasources_DatasourceCreateValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Datasource Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Datavalue",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataValueCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Datasources/{id}/values/batch": {
      "post": {
        "tags": [
          "Datasources"
        ],
        "summary": "Datasource Value Create Batch",
        "description": "Create a batch of new values on Datasource",
        "operationId": "Datasources_DatasourceCreateValuesBatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Datasource Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Datavalues",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataValueCreate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Datasources"
        ],
        "summary": "Datasource Value Delete Batch",
        "description": "Delete a batch of values from Datasource",
        "operationId": "Datasources_DatasourceDeleteValuesBatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Datasource Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Datavalues",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Datasources/{id}/values/batchReplace": {
      "put": {
        "tags": [
          "Datasources"
        ],
        "summary": "Datasource Value Replace Batch",
        "description": "Replace a batch of values on Datasource based on period",
        "operationId": "Datasources_DatasourceValuesBatchReplace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Datasource Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "from",
            "in": "query",
            "description": "From datetime",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2023-12-24T00:00:00Z"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To datetime",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2023-12-25T00:00:00Z"
          }
        ],
        "requestBody": {
          "description": "values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataValueCreate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Datasources/{id}/values/{valueId}": {
      "delete": {
        "tags": [
          "Datasources"
        ],
        "summary": "Datasource Value Delete",
        "description": "Delete a value from Datasource",
        "operationId": "Datasources_DatasourceDeleteValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Datasource Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "valueId",
            "in": "path",
            "description": "value Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/Groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Groups List",
        "description": "List groups with an optional filter",
        "operationId": "Groups_List",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "description": "Generic OData filtering. See [documentation](https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter)",
            "schema": {
              "type": "string"
            },
            "example": "name eq 'mygroup'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Group Create",
        "description": "Create a new Group",
        "operationId": "Groups_Create",
        "requestBody": {
          "description": "Group object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Groups/{id}/members": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Group Members",
        "description": "Get members of Group",
        "operationId": "Groups_Members",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupMember"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Group Member Add",
        "description": "Add a member to group",
        "operationId": "Groups_AddMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Member object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/Groups/{id}/members/{userId}": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Groups Member Remove",
        "description": "Remove a member from Group",
        "operationId": "Groups_RemoveMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0dcd07a1-a28d-4dc8-81f2-7695a7dc50f1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/Groups/{id}": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Group Delete",
        "description": "Delete a group",
        "operationId": "Groups_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/Improvements": {
      "get": {
        "tags": [
          "Improvements"
        ],
        "summary": "Improvements List",
        "description": "List Improvements with an optional filter",
        "operationId": "Improvements_List",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "description": "Generic OData filtering. See [documentation](https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter)",
            "schema": {
              "type": "string"
            },
            "example": "status eq 'Implemented'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImprovementsPagedValues"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents": {
      "get": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incidents List",
        "description": "List incidents with an optional filter",
        "operationId": "Incidents_List",
        "parameters": [
          {
            "name": "TypeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IncidentDateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "IncidentDateTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastModifiedFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastModifiedTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Generic OData filtering. See [documentation](https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter)",
            "schema": {
              "type": "string"
            },
            "example": "severity eq 2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentPagedValues"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Create",
        "description": "Create new Incident",
        "operationId": "Incidents_Create",
        "requestBody": {
          "description": "Incident Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncidentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Update (deprecated)",
        "description": "use PUT incident/{id} instead",
        "operationId": "Incidents_UpdateObsolete",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncidentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/Incidents/{id}": {
      "get": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Details",
        "description": "Get Incident details",
        "operationId": "Incidents_Details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Update",
        "description": "Update Incident",
        "operationId": "Incidents_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Incident object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncidentBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Delete",
        "description": "Delete an Incident",
        "operationId": "Incidents_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/Incidents/types": {
      "get": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Types",
        "description": "Get Incident types",
        "operationId": "Incidents_ListTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/types/{id}": {
      "get": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Type Detail",
        "description": "Get Incident Type details",
        "operationId": "Incidents_TypeConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Type Detail Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language Code",
            "schema": {
              "type": "string",
              "default": ""
            },
            "example": "en"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentTypeConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/comments": {
      "get": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Comments",
        "description": "Get comments on Incident",
        "operationId": "Incidents_Comments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentComment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/attachments": {
      "get": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Attachments",
        "description": "Get attachments on Incident",
        "operationId": "Incidents_Attachments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/tasks": {
      "get": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Tasks",
        "description": "Get action list (tasks) on Incident",
        "operationId": "Incidents_Tasks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/responsible": {
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Responsible Update",
        "description": "Update responsible on Incident",
        "operationId": "Incidents_UpdateResponsible",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Responsible user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncidentResponsible"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/status": {
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Status Update",
        "description": "Update status on Incident",
        "operationId": "Incidents_UpdateStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncidentStatusCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/externalId": {
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident ExternalId Update",
        "description": "Update ExternalId on Incident",
        "operationId": "Incidents_UpdateExternalId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "External Id",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "c100"
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/severity": {
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Severity Update",
        "description": "Update severity on Incident",
        "operationId": "Incidents_UpdateSeverity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Severity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncidentSeverityCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/categories": {
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Categories Update",
        "description": "Update categories on Incident",
        "operationId": "Incidents_UpdateCategories",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IncidentCategory"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/causes": {
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Causes Update",
        "description": "Update causes on Incident",
        "operationId": "Incidents_UpdateCauses",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IncidentCause"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/{id}/consequences": {
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Consequences Update",
        "description": "Update consequences on Incident",
        "operationId": "Incidents_UpdateConsequences",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IncidentConsequence"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/trash": {
      "get": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Trash",
        "description": "List Recently Deleted (30 days) Incidents",
        "operationId": "Incidents_GetTrashIncidents",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentInfoPagedValues"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Incidents/trash/{id}/restore": {
      "put": {
        "tags": [
          "Incidents"
        ],
        "summary": "Incident Trash Restore",
        "description": "Restore a recently deleted Incident",
        "operationId": "Incidents_PutRestore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Project List",
        "description": "List projects with an optional filter",
        "operationId": "Projects_List",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "description": "Generic OData filtering. See [documentation](https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter)",
            "schema": {
              "type": "string"
            },
            "example": "name eq 'hello'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Project Create",
        "description": "Create a new Project",
        "operationId": "Projects_Create",
        "requestBody": {
          "description": "Project object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Projects/{projectNumber}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Project Details",
        "description": "Get Project Details",
        "operationId": "Projects_Details",
        "parameters": [
          {
            "name": "projectNumber",
            "in": "path",
            "description": "Project No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Project Delete",
        "description": "Delete a project",
        "operationId": "Projects_Delete",
        "parameters": [
          {
            "name": "projectNumber",
            "in": "path",
            "description": "Project No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/Projects/{projectNumber}/milestones": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Project Milestones",
        "description": "Get a Project's Milestones",
        "operationId": "Projects_Milestones",
        "parameters": [
          {
            "name": "projectNumber",
            "in": "path",
            "description": "Project No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectMilestone"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Project Milestones Create",
        "description": "Create a new milestone on Project",
        "operationId": "Projects_CreateMilestones",
        "parameters": [
          {
            "name": "projectNumber",
            "in": "path",
            "description": "Project No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p1"
          }
        ],
        "requestBody": {
          "description": "Milestone object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMilestone"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMilestone"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Projects/{projectNumber}/milestones/{milestoneId}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Project Milestone Update",
        "description": "Update a Milestone on Project",
        "operationId": "Projects_UpdateMilestone",
        "parameters": [
          {
            "name": "projectNumber",
            "in": "path",
            "description": "Project No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p1"
          },
          {
            "name": "milestoneId",
            "in": "path",
            "description": "Milestone Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Milestone object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMilestone"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMilestone"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Project Milestone Delete",
        "description": "Delete a Milestone on a Project",
        "operationId": "Projects_DeleteMilestone",
        "parameters": [
          {
            "name": "projectNumber",
            "in": "path",
            "description": "Project No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p1"
          },
          {
            "name": "milestoneId",
            "in": "path",
            "description": "Milestone Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/Projects/{projectNumber}/tasks": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Project Tasks",
        "description": "Get Tasks from Project",
        "operationId": "Projects_Tasks",
        "parameters": [
          {
            "name": "projectNumber",
            "in": "path",
            "description": "Project No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Project Task Create",
        "description": "Create a new Task on Project",
        "operationId": "Projects_CreateTask",
        "parameters": [
          {
            "name": "projectNumber",
            "in": "path",
            "description": "Project No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p1"
          }
        ],
        "requestBody": {
          "description": "Task object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Task Details",
        "description": "Get a Tasks Details",
        "operationId": "Tasks_Details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Task Update",
        "description": "Update a Task",
        "operationId": "Tasks_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Task object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Task Delete",
        "description": "Delete a Task",
        "operationId": "Tasks_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Task Create",
        "description": "Create a new Task",
        "operationId": "Tasks_Create",
        "requestBody": {
          "description": "Task object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Tasks/{id}/SubTasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Task Subtask Create",
        "description": "Create a new subtask on a Task",
        "operationId": "Tasks_CreateSubTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "Subtask object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Users List",
        "description": "List users with optional filter",
        "operationId": "Users_List",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "description": "Generic OData filtering. See [documentation](https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter)",
            "schema": {
              "type": "string"
            },
            "example": "firstName eq 'bob'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Details",
        "description": "Get a User's Details",
        "operationId": "Users_Details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0dcd07a1-a28d-4dc8-81f2-7695a7dc50f1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Users/{id}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Groups",
        "description": "Get a User's Groups",
        "operationId": "Users_GroupsList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0dcd07a1-a28d-4dc8-81f2-7695a7dc50f1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Users/{id}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Roles",
        "operationId": "Users_ListRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0dcd07a1-a28d-4dc8-81f2-7695a7dc50f1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Users/roles/{role}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User by role",
        "operationId": "Users_GetUsersWithRole",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "Role",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserRoleType"
            },
            "example": "Admin"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AssetRoleType": {
        "enum": [
          "Member",
          "Viewer",
          "Owner"
        ],
        "type": "string",
        "x-enum-varnames": [
          "Member",
          "Viewer",
          "Owner"
        ]
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileExtension": {
            "type": "string",
            "nullable": true
          },
          "fileSizeInKb": {
            "type": "integer",
            "format": "int64"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true
          },
          "createdByUser": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchResult": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Board": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoardCategory"
            },
            "nullable": true
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoardCategory"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "boardType": {
            "type": "string",
            "nullable": true
          },
          "isPublic": {
            "type": "boolean"
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BoardCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "weekDay": {
            "type": "string",
            "nullable": true
          },
          "isColumnCategory": {
            "type": "boolean"
          },
          "style": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "responsibleUser": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BoardInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "boardType": {
            "type": "string",
            "nullable": true
          },
          "isPublic": {
            "type": "boolean"
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Cause": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "dataListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomFieldValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedByUser": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "identifier": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataListItemCreate": {
        "type": "object",
        "properties": {
          "identifier": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSource": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "objectSource": {
            "type": "string",
            "nullable": true
          },
          "unitOfTime": {
            "type": "string",
            "nullable": true
          },
          "primaryInputSource": {
            "type": "string",
            "nullable": true
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSourceElement"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSourceElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/DataSourceElementType"
          },
          "isMandatory": {
            "type": "boolean"
          },
          "sourceColumn": {
            "type": "string",
            "nullable": true
          },
          "dataListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSourceElementType": {
        "enum": [
          "area",
          "asset",
          "board",
          "bool",
          "description",
          "list",
          "number",
          "project",
          "text",
          "user"
        ],
        "type": "string",
        "x-enum-varnames": [
          "Area",
          "Asset",
          "Board",
          "Bool",
          "Description",
          "List",
          "Number",
          "Project",
          "Text",
          "User"
        ]
      },
      "DataSourceInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataValue": {
        "required": [
          "dataSourceId",
          "value",
          "valueDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "registrationDate": {
            "type": "string",
            "format": "date-time"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "assetId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "dimension": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "dimension2": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "dimension3": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "dimension4": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "valueDate": {
            "type": "string",
            "format": "date-time"
          },
          "externalId": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataValueCreate": {
        "required": [
          "value",
          "valueDate"
        ],
        "type": "object",
        "properties": {
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "assetId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "dimension": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "dimension2": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "dimension3": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "dimension4": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "valueDate": {
            "type": "string",
            "format": "date-time"
          },
          "externalId": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Base class for DataValue for API"
      },
      "DataValuesPaged": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNo": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "buisnessUnitId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Improvement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "priorityStatus": {
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "group": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "project": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "suggestedByUserId": {
            "type": "string",
            "nullable": true
          },
          "suggestedBy": {
            "type": "string",
            "nullable": true
          },
          "suggestionDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "plannedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "inProgressDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "implementedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "evaluatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "responsibleUser": {
            "type": "string",
            "nullable": true
          },
          "responsibleDisplayName": {
            "type": "string",
            "nullable": true
          },
          "attachmentCount": {
            "type": "integer",
            "format": "int32"
          },
          "actionListCount": {
            "type": "integer",
            "format": "int32"
          },
          "commentCount": {
            "type": "integer",
            "format": "int32"
          },
          "likeCount": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "costOfInvestment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gainOfInvestment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "costOfInvestmentHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gainOfInvestmentHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "estimatedCostOfInvestment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "estimatedGainOfInvestment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "estimatedCostOfInvestmentHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "estimatedGainOfInvestmentHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImprovementsPagedValues": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Improvement"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Incident": {
        "required": [
          "incidentDate",
          "incidentTypeId",
          "severity",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "project": {
            "type": "string",
            "nullable": true
          },
          "incidentType": {
            "type": "string",
            "nullable": true
          },
          "severityText": {
            "$ref": "#/components/schemas/IncidentSeverity"
          },
          "reportedByGroup": {
            "type": "string",
            "nullable": true
          },
          "reportedByUserId": {
            "type": "string",
            "nullable": true
          },
          "reportedBy": {
            "type": "string",
            "nullable": true
          },
          "reportedDate": {
            "type": "string",
            "format": "date-time"
          },
          "followUpGroup": {
            "type": "string",
            "nullable": true
          },
          "responsible": {
            "type": "string",
            "nullable": true
          },
          "responsibleDisplayName": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "numberOfComments": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfActions": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfAttachments": {
            "type": "integer",
            "format": "int32"
          },
          "consequences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentConsequence"
            },
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentCategory"
            },
            "nullable": true
          },
          "causes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentCause"
            },
            "nullable": true
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentCustomField"
            },
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": " New = 0,\r\nInProgress = 10,\r\nResolved = 20,\r\nRejected = 30",
            "format": "int32"
          },
          "statusText": {
            "$ref": "#/components/schemas/IncidentStatus"
          },
          "incidentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "severity": {
            "type": "integer",
            "description": " None = 0,\r\nLow = 1,\r\nMedium = 2,\r\nHigh = 3",
            "format": "int32"
          },
          "reportedByGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "followUpGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "incidentDate": {
            "type": "string",
            "format": "date-time"
          },
          "resolvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "evaluationStatus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "evaluationText": {
            "type": "string",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentBase": {
        "required": [
          "incidentDate",
          "incidentTypeId",
          "severity",
          "title"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": " New = 0,\r\nInProgress = 10,\r\nResolved = 20,\r\nRejected = 30",
            "format": "int32"
          },
          "statusText": {
            "$ref": "#/components/schemas/IncidentStatus"
          },
          "incidentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "severity": {
            "type": "integer",
            "description": " None = 0,\r\nLow = 1,\r\nMedium = 2,\r\nHigh = 3",
            "format": "int32"
          },
          "reportedByGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "followUpGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "incidentDate": {
            "type": "string",
            "format": "date-time"
          },
          "resolvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "evaluationStatus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "evaluationText": {
            "type": "string",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentCategory": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentCause": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "commentDate": {
            "type": "string",
            "format": "date-time"
          },
          "commentedBy": {
            "type": "string",
            "nullable": true
          },
          "commentedByUserId": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "level": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IncidentConsequence": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentCreate": {
        "required": [
          "incidentDate",
          "incidentTypeId",
          "severity",
          "title"
        ],
        "type": "object",
        "properties": {
          "statusModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "severityText": {
            "$ref": "#/components/schemas/IncidentSeverity"
          },
          "responsible": {
            "type": "string",
            "nullable": true
          },
          "responsibleDisplayName": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true
          },
          "createdByUser": {
            "type": "string",
            "nullable": true
          },
          "createdByUserDisplayName": {
            "type": "string",
            "nullable": true
          },
          "statusNewDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "consequences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentConsequence"
            },
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentCategory"
            },
            "nullable": true
          },
          "causes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentCause"
            },
            "nullable": true
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            },
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": " New = 0,\r\nInProgress = 10,\r\nResolved = 20,\r\nRejected = 30",
            "format": "int32"
          },
          "statusText": {
            "$ref": "#/components/schemas/IncidentStatus"
          },
          "incidentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "severity": {
            "type": "integer",
            "description": " None = 0,\r\nLow = 1,\r\nMedium = 2,\r\nHigh = 3",
            "format": "int32"
          },
          "reportedByGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "followUpGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "incidentDate": {
            "type": "string",
            "format": "date-time"
          },
          "resolvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "evaluationStatus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "evaluationText": {
            "type": "string",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentCustomField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "dataListValue": {
            "type": "string",
            "nullable": true
          },
          "dataListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dataListName": {
            "type": "string",
            "nullable": true
          },
          "registrationDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentInfo": {
        "required": [
          "incidentDate",
          "incidentTypeId",
          "severity",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "project": {
            "type": "string",
            "nullable": true
          },
          "incidentType": {
            "type": "string",
            "nullable": true
          },
          "severityText": {
            "$ref": "#/components/schemas/IncidentSeverity"
          },
          "reportedByGroup": {
            "type": "string",
            "nullable": true
          },
          "reportedByUserId": {
            "type": "string",
            "nullable": true
          },
          "reportedBy": {
            "type": "string",
            "nullable": true
          },
          "reportedDate": {
            "type": "string",
            "format": "date-time"
          },
          "followUpGroup": {
            "type": "string",
            "nullable": true
          },
          "responsible": {
            "type": "string",
            "nullable": true
          },
          "responsibleDisplayName": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "numberOfComments": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfActions": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfAttachments": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "integer",
            "description": " New = 0,\r\nInProgress = 10,\r\nResolved = 20,\r\nRejected = 30",
            "format": "int32"
          },
          "statusText": {
            "$ref": "#/components/schemas/IncidentStatus"
          },
          "incidentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "severity": {
            "type": "integer",
            "description": " None = 0,\r\nLow = 1,\r\nMedium = 2,\r\nHigh = 3",
            "format": "int32"
          },
          "reportedByGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "followUpGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "incidentDate": {
            "type": "string",
            "format": "date-time"
          },
          "resolvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "evaluationStatus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "evaluationText": {
            "type": "string",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentInfoPagedValues": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentPagedValues": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Incident"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "For API v1"
      },
      "IncidentResponsible": {
        "required": [
          "followUpGroupId",
          "responsibleUserId"
        ],
        "type": "object",
        "properties": {
          "followUpGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "responsibleUserId": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IncidentSeverity": {
        "enum": [
          "None",
          "Low",
          "Medium",
          "High"
        ],
        "type": "string",
        "x-enum-varnames": [
          "None",
          "Low",
          "Medium",
          "High"
        ]
      },
      "IncidentSeverityCode": {
        "type": "object",
        "properties": {
          "severity": {
            "$ref": "#/components/schemas/IncidentSeverity"
          }
        },
        "additionalProperties": false
      },
      "IncidentStatus": {
        "enum": [
          "New",
          "InProgress",
          "Resolved",
          "Rejected"
        ],
        "type": "string",
        "x-enum-varnames": [
          "New",
          "InProgress",
          "Resolved",
          "Rejected"
        ]
      },
      "IncidentStatusCode": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/IncidentStatus"
          }
        },
        "additionalProperties": false
      },
      "IncidentType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentTypeConfiguration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            },
            "nullable": true
          },
          "consequences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentTypeConsequence"
            },
            "nullable": true
          },
          "causes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cause"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentTypeConsequence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentUpdate": {
        "required": [
          "incidentDate",
          "incidentTypeId",
          "severity",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "integer",
            "description": " New = 0,\r\nInProgress = 10,\r\nResolved = 20,\r\nRejected = 30",
            "format": "int32"
          },
          "statusText": {
            "$ref": "#/components/schemas/IncidentStatus"
          },
          "incidentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "severity": {
            "type": "integer",
            "description": " None = 0,\r\nLow = 1,\r\nMedium = 2,\r\nHigh = 3",
            "format": "int32"
          },
          "reportedByGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "followUpGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "incidentDate": {
            "type": "string",
            "format": "date-time"
          },
          "resolvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "evaluationStatus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "evaluationText": {
            "type": "string",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "projectNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "estimatedStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "estimatedEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectCreate": {
        "required": [
          "name",
          "projectNumber"
        ],
        "type": "object",
        "properties": {
          "projectNumber": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "estimatedStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "estimatedEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "nullable": true
          },
          "ownerEmail": {
            "type": "string",
            "nullable": true
          },
          "membersEmail": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectCustomer": {
        "required": [
          "customerNumber",
          "name"
        ],
        "type": "object",
        "properties": {
          "customerNumber": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProjectInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "projectNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectMilestone": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "projectId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "plannedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "actualDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskBase": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "boardId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "rowCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "columnCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskInfo": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "responsibleUser": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "boardId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "rowCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "columnCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskPaged": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskStatus": {
        "enum": [
          "NotStarted",
          "Completed",
          "Blocked"
        ],
        "type": "string",
        "x-enum-varnames": [
          "NotStarted",
          "Completed",
          "Blocked"
        ]
      },
      "User": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "userName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userName": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "useAD": {
            "type": "boolean"
          },
          "azureAdObjectId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "minLength": 1,
            "type": "string"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "screenName": {
            "maxLength": 6,
            "type": "string",
            "nullable": true
          },
          "isInfoScreenUser": {
            "type": "boolean"
          },
          "isMobileUser": {
            "type": "boolean"
          },
          "preferredLanguage": {
            "type": "string",
            "nullable": true
          },
          "businessUnitId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserGroupMember": {
        "required": [
          "groupRole",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "minLength": 1,
            "type": "string"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "azureObjectId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "groupRole": {
            "$ref": "#/components/schemas/AssetRoleType"
          }
        },
        "additionalProperties": false
      },
      "UserRoleType": {
        "enum": [
          "KaizenAdmin",
          "Admin",
          "Support",
          "BusinessunitAdmin",
          "BoardDesigner",
          "SystemApi",
          "A3Admin",
          "ImprovementAdmin",
          "DeviationAdmin",
          "ProjectAdmin",
          "StrategyAdmin",
          "LearningAdmin",
          "DataAdmin",
          "MessageWriter"
        ],
        "type": "string",
        "x-enum-varnames": [
          "KaizenAdmin",
          "Admin",
          "Support",
          "BusinessunitAdmin",
          "BoardDesigner",
          "SystemApi",
          "A3Admin",
          "ImprovementAdmin",
          "DeviationAdmin",
          "ProjectAdmin",
          "StrategyAdmin",
          "LearningAdmin",
          "DataAdmin",
          "MessageWriter"
        ]
      }
    },
    "securitySchemes": {
      "ClientCredentials": {
        "type": "oauth2",
        "description": "Client Credentials flow. Authorization header with Bearer token",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth-test.digilean.tools/connect/token",
            "scopes": {
              "public.api.read": "read all",
              "public.api.write": "write all",
              "Boards.Read": "Boards Read",
              "Boards.ReadWrite": "Boards Write",
              "Improvements.Read": "Improvements Read",
              "Improvements.ReadWrite": "Improvements Write",
              "Incidents.Read": "Incidents Read",
              "Incidents.ReadWrite": "Incidents Write",
              "Data.Read": "Data Read",
              "Data.ReadWrite": "Data Write",
              "Projects.Read": "Projects Read",
              "Projects.ReadWrite": "Projects Write",
              "Tasks.Read": "Tasks Read",
              "Tasks.ReadWrite": "Tasks Write",
              "UserManagement.Read": "Users and Groups Read",
              "UserManagement.ReadWrite": "Users and Groups Write"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "ClientCredentials": [ ]
    }
  ]
}